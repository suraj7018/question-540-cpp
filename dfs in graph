class Solution {
  public:
    void dfs(int num, vector<int> &ans, vector<int> adj[], vector<int> &visited){
        visited[num] = 1;
        ans.push_back(num);
        
        for(auto i : adj[num]){
            if(!visited[i]){
                dfs(i, ans, adj, visited);
            }
        }
    }
    // Function to return a list containing the DFS traversal of the graph.
    vector<int> dfsOfGraph(int V, vector<int> adj[]) {
        vector<int> ans;
        vector<int> visited(V, 0);
        for(int i = 0; i<V;i++){
            if(!visited[i]){
                dfs(i, ans, adj, visited);
            }
        }
        return ans;
    }
};
